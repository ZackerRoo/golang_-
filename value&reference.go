package main

// func main() {
// 	// 值类型（Value Types）
// 	// 值类型的变量直接存储值，它们的值在赋值或作为参数传递给函数时，实际上是被复制的。Go语言中的值类型包括：

// 	// 基本类型：
// 	// 整型（int, uint, int8, uint8, int16, uint16, int32, uint32, int64, uint64）
// 	// 浮点型（float32, float64）
// 	// 布尔型（bool）
// 	// 字符串型（string）
// 	// 复数类型（complex64, complex128）
// 	// 复合类型：
// 	// 数组（Array）：当声明一个数组时，数组中的元素被初始化为元素类型的零值。数组的长度是数组类型的一部分。
// 	// 值类型的特性意味着，当这些类型的变量被赋值给另一个变量时，或者将它们作为参数传递给函数时，实际上操作的是数据的副本，原始数据不会被改变。

// 	// 引用类型（Reference Types）
// 	// 引用类型的变量存储的是数据的引用，即数据在内存中的地址。当引用类型的变量被赋值给另一个变量，或者作为参数传递时，传递的是引用（内存地址），因此多个变量可能指向内存中的同一位置。引用类型包括：

// 	// 切片（Slices）
// 	// 映射（Maps）
// 	// 通道（Channels）
// 	// 指针（Pointers）
// 	// 函数（Functions）
// 	// 接口（Interfaces）
// 	// 引用类型的特性意味着，当对这些类型的变量进行操作时（比如修改切片中的元素），所有引用了同一内存位置的变量都会反映出这个改变。

// 	// 特殊注意
// 	// 虽然指针（Pointers）被分类为引用类型，它们实际上存储的是值的内存地址。通过指针，可以直接读取或修改该地址处的值。这允许程序以引用的方式操作值类型，从而避免复制开销或允许函数修改其接收到的值类型参数。
// }
