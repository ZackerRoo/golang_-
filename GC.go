package main

// func main() {
// 	/*
// 		垃圾回收算法 三色标记法
// 		三色标记法是一种基于追踪的垃圾回收算法，它将对象分为三种颜色：白色、灰色和黑色。
// 		白色：表示对象尚未扫描过。
// 		灰色：表示对象已经扫描过，但其引用对象还没有扫描过。
// 		黑色：表示对象已经扫描过，且其引用对象也扫描过。 引用对象指的是内存中的对象之间的引用关系。
// 		具体的操作步骤如下：
// 		1. 初始化时候所有对象都是白色的 加入了一个root set 根集合是一组可达对象 如全局变量和内存栈等
// 		2. 将所有根集合里面的对象标记为灰色，然后将其放入一个队列中。
// 		3. 从队列中取出一个灰色对象，将其标记为黑色，然后将其引用对象标记为灰色，然后将其引用对象放入队列中。
// 		4. 将灰色对象的引用对象标记为黑色
// 		5. 重复步骤3和4，直到队列为空。
// 		6. 将所有白色对象回收。

// 		写屏障指的是防止错误回收内存

// 		垃圾回收器在以下情况下会触发垃圾回收
// 		1. 内存占用率达到阈值
// 		2. 分配速率达到阈值
// 		3. 空闲时间达到阈值
// 		4. 显式调用runtime.GC()函数
// 		垃圾回收策略是并发执行的

// 		GC的流程是
// 		1. 标记阶段
// 		2. 清除阶段 垃圾回收器会遍历完整个堆，将所有未标记的对象都回收掉
// 		3. 内存整理阶段 回收完成后会留下一个一个不连续的内存块，这个时候会进行内存整理，将内存块整理成连续的内存块

// 		垃圾回收算法的调优
// 		1. GOGC环境变量
// 		2. 内存池
// 		3. 对象大小和生命周期
// 		4. 并发度
// 		5. 避免过度分配
// 	*/
// }
